// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/Ligouhai-bigone/easy_douyin/cmd/video/kitex_gen/videodemo"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videodemo.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Like":               kitex.NewMethodInfo(likeHandler, newVideoServiceLikeArgs, newVideoServiceLikeResult, false),
		"UnLike":             kitex.NewMethodInfo(unLikeHandler, newVideoServiceUnLikeArgs, newVideoServiceUnLikeResult, false),
		"QueryVideoList":     kitex.NewMethodInfo(queryVideoListHandler, newVideoServiceQueryVideoListArgs, newVideoServiceQueryVideoListResult, false),
		"QueryLikeVideoList": kitex.NewMethodInfo(queryLikeVideoListHandler, newVideoServiceQueryLikeVideoListArgs, newVideoServiceQueryLikeVideoListResult, false),
		"FeedVideoList":      kitex.NewMethodInfo(feedVideoListHandler, newVideoServiceFeedVideoListArgs, newVideoServiceFeedVideoListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videodemo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceLikeArgs)
	realResult := result.(*videodemo.VideoServiceLikeResult)
	success, err := handler.(videodemo.VideoService).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceLikeArgs() interface{} {
	return videodemo.NewVideoServiceLikeArgs()
}

func newVideoServiceLikeResult() interface{} {
	return videodemo.NewVideoServiceLikeResult()
}

func unLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceUnLikeArgs)
	realResult := result.(*videodemo.VideoServiceUnLikeResult)
	success, err := handler.(videodemo.VideoService).UnLike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUnLikeArgs() interface{} {
	return videodemo.NewVideoServiceUnLikeArgs()
}

func newVideoServiceUnLikeResult() interface{} {
	return videodemo.NewVideoServiceUnLikeResult()
}

func queryVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceQueryVideoListArgs)
	realResult := result.(*videodemo.VideoServiceQueryVideoListResult)
	success, err := handler.(videodemo.VideoService).QueryVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceQueryVideoListArgs() interface{} {
	return videodemo.NewVideoServiceQueryVideoListArgs()
}

func newVideoServiceQueryVideoListResult() interface{} {
	return videodemo.NewVideoServiceQueryVideoListResult()
}

func queryLikeVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceQueryLikeVideoListArgs)
	realResult := result.(*videodemo.VideoServiceQueryLikeVideoListResult)
	success, err := handler.(videodemo.VideoService).QueryLikeVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceQueryLikeVideoListArgs() interface{} {
	return videodemo.NewVideoServiceQueryLikeVideoListArgs()
}

func newVideoServiceQueryLikeVideoListResult() interface{} {
	return videodemo.NewVideoServiceQueryLikeVideoListResult()
}

func feedVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceFeedVideoListArgs)
	realResult := result.(*videodemo.VideoServiceFeedVideoListResult)
	success, err := handler.(videodemo.VideoService).FeedVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedVideoListArgs() interface{} {
	return videodemo.NewVideoServiceFeedVideoListArgs()
}

func newVideoServiceFeedVideoListResult() interface{} {
	return videodemo.NewVideoServiceFeedVideoListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *videodemo.LikeRequest) (r *videodemo.LikeResponse, err error) {
	var _args videodemo.VideoServiceLikeArgs
	_args.Req = req
	var _result videodemo.VideoServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnLike(ctx context.Context, req *videodemo.UnLikeRequest) (r *videodemo.UnLikeResponse, err error) {
	var _args videodemo.VideoServiceUnLikeArgs
	_args.Req = req
	var _result videodemo.VideoServiceUnLikeResult
	if err = p.c.Call(ctx, "UnLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryVideoList(ctx context.Context, req *videodemo.QueryVideoListRequest) (r *videodemo.QueryVideoListResponse, err error) {
	var _args videodemo.VideoServiceQueryVideoListArgs
	_args.Req = req
	var _result videodemo.VideoServiceQueryVideoListResult
	if err = p.c.Call(ctx, "QueryVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryLikeVideoList(ctx context.Context, req *videodemo.QueryLikeVideoListRequest) (r *videodemo.QueryLikeVideoListResponse, err error) {
	var _args videodemo.VideoServiceQueryLikeVideoListArgs
	_args.Req = req
	var _result videodemo.VideoServiceQueryLikeVideoListResult
	if err = p.c.Call(ctx, "QueryLikeVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FeedVideoList(ctx context.Context, req *videodemo.FeedVideoListRequest) (r *videodemo.FeedVideoListResponse, err error) {
	var _args videodemo.VideoServiceFeedVideoListArgs
	_args.Req = req
	var _result videodemo.VideoServiceFeedVideoListResult
	if err = p.c.Call(ctx, "FeedVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
