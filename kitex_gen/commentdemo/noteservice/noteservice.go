// Code generated by Kitex v0.3.2. DO NOT EDIT.

package noteservice

import (
	"context"
	"github.com/Ligouhai-bigone/easy_douyin/kitex_gen/commentdemo"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return noteServiceServiceInfo
}

var noteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NoteService"
	handlerType := (*commentdemo.NoteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendComment":    kitex.NewMethodInfo(sendCommentHandler, newNoteServiceSendCommentArgs, newNoteServiceSendCommentResult, false),
		"GetAllComments": kitex.NewMethodInfo(getAllCommentsHandler, newNoteServiceGetAllCommentsArgs, newNoteServiceGetAllCommentsResult, false),
		"DeleteComment":  kitex.NewMethodInfo(deleteCommentHandler, newNoteServiceDeleteCommentArgs, newNoteServiceDeleteCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "commentdemo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func sendCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commentdemo.NoteServiceSendCommentArgs)
	realResult := result.(*commentdemo.NoteServiceSendCommentResult)
	success, err := handler.(commentdemo.NoteService).SendComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNoteServiceSendCommentArgs() interface{} {
	return commentdemo.NewNoteServiceSendCommentArgs()
}

func newNoteServiceSendCommentResult() interface{} {
	return commentdemo.NewNoteServiceSendCommentResult()
}

func getAllCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commentdemo.NoteServiceGetAllCommentsArgs)
	realResult := result.(*commentdemo.NoteServiceGetAllCommentsResult)
	success, err := handler.(commentdemo.NoteService).GetAllComments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNoteServiceGetAllCommentsArgs() interface{} {
	return commentdemo.NewNoteServiceGetAllCommentsArgs()
}

func newNoteServiceGetAllCommentsResult() interface{} {
	return commentdemo.NewNoteServiceGetAllCommentsResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commentdemo.NoteServiceDeleteCommentArgs)
	realResult := result.(*commentdemo.NoteServiceDeleteCommentResult)
	success, err := handler.(commentdemo.NoteService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNoteServiceDeleteCommentArgs() interface{} {
	return commentdemo.NewNoteServiceDeleteCommentArgs()
}

func newNoteServiceDeleteCommentResult() interface{} {
	return commentdemo.NewNoteServiceDeleteCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendComment(ctx context.Context, req *commentdemo.SendCommentRequest) (r *commentdemo.SendCommentResponse, err error) {
	var _args commentdemo.NoteServiceSendCommentArgs
	_args.Req = req
	var _result commentdemo.NoteServiceSendCommentResult
	if err = p.c.Call(ctx, "SendComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllComments(ctx context.Context, req *commentdemo.GetAllCommentsRequest) (r *commentdemo.GetAllCommentsResponse, err error) {
	var _args commentdemo.NoteServiceGetAllCommentsArgs
	_args.Req = req
	var _result commentdemo.NoteServiceGetAllCommentsResult
	if err = p.c.Call(ctx, "GetAllComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *commentdemo.DeleteCommentRequset) (r *commentdemo.DeleteCommentResponse, err error) {
	var _args commentdemo.NoteServiceDeleteCommentArgs
	_args.Req = req
	var _result commentdemo.NoteServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
