// Code generated by Kitex v0.3.2. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	"github.com/Ligouhai-bigone/easy_douyin/kitex_gen/userdemo"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*userdemo.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":        kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"GetUser":         kitex.NewMethodInfo(getUserHandler, newGetUserArgs, newGetUserResult, false),
		"CheckUser":       kitex.NewMethodInfo(checkUserHandler, newCheckUserArgs, newCheckUserResult, false),
		"FollowUser":      kitex.NewMethodInfo(followUserHandler, newFollowUserArgs, newFollowUserResult, false),
		"UnFollowUser":    kitex.NewMethodInfo(unFollowUserHandler, newUnFollowUserArgs, newUnFollowUserResult, false),
		"GetFollowList":   kitex.NewMethodInfo(getFollowListHandler, newGetFollowListArgs, newGetFollowListResult, false),
		"GetFollowerList": kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.RegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(userdemo.UserService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *userdemo.RegisterRequest
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.RegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *userdemo.RegisterRequest

func (p *RegisterArgs) GetReq() *userdemo.RegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterResult struct {
	Success *userdemo.RegisterResponse
}

var RegisterResult_Success_DEFAULT *userdemo.RegisterResponse

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(userdemo.RegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *userdemo.RegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.RegisterResponse)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.GetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).GetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserArgs:
		success, err := handler.(userdemo.UserService).GetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserArgs() interface{} {
	return &GetUserArgs{}
}

func newGetUserResult() interface{} {
	return &GetUserResult{}
}

type GetUserArgs struct {
	Req *userdemo.GetUserRequest
}

func (p *GetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.GetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserArgs_Req_DEFAULT *userdemo.GetUserRequest

func (p *GetUserArgs) GetReq() *userdemo.GetUserRequest {
	if !p.IsSetReq() {
		return GetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserResult struct {
	Success *userdemo.GetUserResponse
}

var GetUserResult_Success_DEFAULT *userdemo.GetUserResponse

func (p *GetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.GetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserResult) GetSuccess() *userdemo.GetUserResponse {
	if !p.IsSetSuccess() {
		return GetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.GetUserResponse)
}

func (p *GetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.CheckUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).CheckUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckUserArgs:
		success, err := handler.(userdemo.UserService).CheckUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckUserResult)
		realResult.Success = success
	}
	return nil
}
func newCheckUserArgs() interface{} {
	return &CheckUserArgs{}
}

func newCheckUserResult() interface{} {
	return &CheckUserResult{}
}

type CheckUserArgs struct {
	Req *userdemo.CheckUserRequest
}

func (p *CheckUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.CheckUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckUserArgs_Req_DEFAULT *userdemo.CheckUserRequest

func (p *CheckUserArgs) GetReq() *userdemo.CheckUserRequest {
	if !p.IsSetReq() {
		return CheckUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckUserResult struct {
	Success *userdemo.CheckUserResponse
}

var CheckUserResult_Success_DEFAULT *userdemo.CheckUserResponse

func (p *CheckUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.CheckUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckUserResult) GetSuccess() *userdemo.CheckUserResponse {
	if !p.IsSetSuccess() {
		return CheckUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.CheckUserResponse)
}

func (p *CheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func followUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.FollowUserRequset)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).FollowUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowUserArgs:
		success, err := handler.(userdemo.UserService).FollowUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowUserResult)
		realResult.Success = success
	}
	return nil
}
func newFollowUserArgs() interface{} {
	return &FollowUserArgs{}
}

func newFollowUserResult() interface{} {
	return &FollowUserResult{}
}

type FollowUserArgs struct {
	Req *userdemo.FollowUserRequset
}

func (p *FollowUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.FollowUserRequset)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowUserArgs_Req_DEFAULT *userdemo.FollowUserRequset

func (p *FollowUserArgs) GetReq() *userdemo.FollowUserRequset {
	if !p.IsSetReq() {
		return FollowUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowUserResult struct {
	Success *userdemo.FollowUserResponse
}

var FollowUserResult_Success_DEFAULT *userdemo.FollowUserResponse

func (p *FollowUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.FollowUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowUserResult) GetSuccess() *userdemo.FollowUserResponse {
	if !p.IsSetSuccess() {
		return FollowUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.FollowUserResponse)
}

func (p *FollowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func unFollowUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.UnFollowUserRequset)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).UnFollowUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UnFollowUserArgs:
		success, err := handler.(userdemo.UserService).UnFollowUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnFollowUserResult)
		realResult.Success = success
	}
	return nil
}
func newUnFollowUserArgs() interface{} {
	return &UnFollowUserArgs{}
}

func newUnFollowUserResult() interface{} {
	return &UnFollowUserResult{}
}

type UnFollowUserArgs struct {
	Req *userdemo.UnFollowUserRequset
}

func (p *UnFollowUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UnFollowUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UnFollowUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.UnFollowUserRequset)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnFollowUserArgs_Req_DEFAULT *userdemo.UnFollowUserRequset

func (p *UnFollowUserArgs) GetReq() *userdemo.UnFollowUserRequset {
	if !p.IsSetReq() {
		return UnFollowUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnFollowUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type UnFollowUserResult struct {
	Success *userdemo.UnFollowUserResponse
}

var UnFollowUserResult_Success_DEFAULT *userdemo.UnFollowUserResponse

func (p *UnFollowUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UnFollowUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UnFollowUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.UnFollowUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnFollowUserResult) GetSuccess() *userdemo.UnFollowUserResponse {
	if !p.IsSetSuccess() {
		return UnFollowUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnFollowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.UnFollowUserResponse)
}

func (p *UnFollowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.GetFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).GetFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowListArgs:
		success, err := handler.(userdemo.UserService).GetFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowListArgs() interface{} {
	return &GetFollowListArgs{}
}

func newGetFollowListResult() interface{} {
	return &GetFollowListResult{}
}

type GetFollowListArgs struct {
	Req *userdemo.GetFollowListRequest
}

func (p *GetFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowListArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowListArgs_Req_DEFAULT *userdemo.GetFollowListRequest

func (p *GetFollowListArgs) GetReq() *userdemo.GetFollowListRequest {
	if !p.IsSetReq() {
		return GetFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowListResult struct {
	Success *userdemo.GetFollowListResponse
}

var GetFollowListResult_Success_DEFAULT *userdemo.GetFollowListResponse

func (p *GetFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowListResult) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowListResult) GetSuccess() *userdemo.GetFollowListResponse {
	if !p.IsSetSuccess() {
		return GetFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.GetFollowListResponse)
}

func (p *GetFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.GetFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(userdemo.UserService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *userdemo.GetFollowerListRequest
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *userdemo.GetFollowerListRequest

func (p *GetFollowerListArgs) GetReq() *userdemo.GetFollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerListResult struct {
	Success *userdemo.GetFollowerListResponse
}

var GetFollowerListResult_Success_DEFAULT *userdemo.GetFollowerListResponse

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *userdemo.GetFollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.GetFollowerListResponse)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *userdemo.RegisterRequest) (r *userdemo.RegisterResponse, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, Req *userdemo.GetUserRequest) (r *userdemo.GetUserResponse, err error) {
	var _args GetUserArgs
	_args.Req = Req
	var _result GetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, Req *userdemo.CheckUserRequest) (r *userdemo.CheckUserResponse, err error) {
	var _args CheckUserArgs
	_args.Req = Req
	var _result CheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowUser(ctx context.Context, Req *userdemo.FollowUserRequset) (r *userdemo.FollowUserResponse, err error) {
	var _args FollowUserArgs
	_args.Req = Req
	var _result FollowUserResult
	if err = p.c.Call(ctx, "FollowUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnFollowUser(ctx context.Context, Req *userdemo.UnFollowUserRequset) (r *userdemo.UnFollowUserResponse, err error) {
	var _args UnFollowUserArgs
	_args.Req = Req
	var _result UnFollowUserResult
	if err = p.c.Call(ctx, "UnFollowUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, Req *userdemo.GetFollowListRequest) (r *userdemo.GetFollowListResponse, err error) {
	var _args GetFollowListArgs
	_args.Req = Req
	var _result GetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *userdemo.GetFollowerListRequest) (r *userdemo.GetFollowerListResponse, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
